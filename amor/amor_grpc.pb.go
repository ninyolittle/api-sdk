// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: amor/amor.proto

package amor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectAmor_AddAccommodation_FullMethodName       = "/projectamor_api.amor.v1.ProjectAmor/AddAccommodation"
	ProjectAmor_DeleteAccommodation_FullMethodName    = "/projectamor_api.amor.v1.ProjectAmor/DeleteAccommodation"
	ProjectAmor_UpdateAccommodation_FullMethodName    = "/projectamor_api.amor.v1.ProjectAmor/UpdateAccommodation"
	ProjectAmor_GetAccommodation_FullMethodName       = "/projectamor_api.amor.v1.ProjectAmor/GetAccommodation"
	ProjectAmor_GetAccommodationByUser_FullMethodName = "/projectamor_api.amor.v1.ProjectAmor/GetAccommodationByUser"
	ProjectAmor_ListAccommodation_FullMethodName      = "/projectamor_api.amor.v1.ProjectAmor/ListAccommodation"
	ProjectAmor_GetRoom_FullMethodName                = "/projectamor_api.amor.v1.ProjectAmor/GetRoom"
	ProjectAmor_ListRoom_FullMethodName               = "/projectamor_api.amor.v1.ProjectAmor/ListRoom"
	ProjectAmor_UpdateRoom_FullMethodName             = "/projectamor_api.amor.v1.ProjectAmor/UpdateRoom"
	ProjectAmor_AddRoom_FullMethodName                = "/projectamor_api.amor.v1.ProjectAmor/AddRoom"
	ProjectAmor_DeleteRoom_FullMethodName             = "/projectamor_api.amor.v1.ProjectAmor/DeleteRoom"
	ProjectAmor_RegisterUser_FullMethodName           = "/projectamor_api.amor.v1.ProjectAmor/RegisterUser"
	ProjectAmor_LoginUser_FullMethodName              = "/projectamor_api.amor.v1.ProjectAmor/LoginUser"
	ProjectAmor_ResetPassword_FullMethodName          = "/projectamor_api.amor.v1.ProjectAmor/ResetPassword"
	ProjectAmor_ListUtilities_FullMethodName          = "/projectamor_api.amor.v1.ProjectAmor/ListUtilities"
	ProjectAmor_GetUser_FullMethodName                = "/projectamor_api.amor.v1.ProjectAmor/GetUser"
	ProjectAmor_ReserveRoom_FullMethodName            = "/projectamor_api.amor.v1.ProjectAmor/ReserveRoom"
	ProjectAmor_RemoveReserveRoom_FullMethodName      = "/projectamor_api.amor.v1.ProjectAmor/RemoveReserveRoom"
	ProjectAmor_ListNotifications_FullMethodName      = "/projectamor_api.amor.v1.ProjectAmor/ListNotifications"
	ProjectAmor_ListRoomReviews_FullMethodName        = "/projectamor_api.amor.v1.ProjectAmor/ListRoomReviews"
	ProjectAmor_CreateRoomReview_FullMethodName       = "/projectamor_api.amor.v1.ProjectAmor/CreateRoomReview"
	ProjectAmor_SubscribeNotification_FullMethodName  = "/projectamor_api.amor.v1.ProjectAmor/SubscribeNotification"
	ProjectAmor_DeleteNotification_FullMethodName     = "/projectamor_api.amor.v1.ProjectAmor/DeleteNotification"
	ProjectAmor_UpdateNotification_FullMethodName     = "/projectamor_api.amor.v1.ProjectAmor/UpdateNotification"
	ProjectAmor_ChangeProfilePicture_FullMethodName   = "/projectamor_api.amor.v1.ProjectAmor/ChangeProfilePicture"
)

// ProjectAmorClient is the client API for ProjectAmor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectAmorClient interface {
	AddAccommodation(ctx context.Context, in *AddAccommodationRequest, opts ...grpc.CallOption) (*AddAccommodationResponse, error)
	DeleteAccommodation(ctx context.Context, in *DeleteAccommodationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAccommodation(ctx context.Context, in *UpdateAccommodationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccommodation(ctx context.Context, in *GetAccommodationRequest, opts ...grpc.CallOption) (*GetAccommodationResponse, error)
	GetAccommodationByUser(ctx context.Context, in *GetAccommodationByUserRequest, opts ...grpc.CallOption) (*GetAccommodationByUserResponse, error)
	ListAccommodation(ctx context.Context, opts ...grpc.CallOption) (ProjectAmor_ListAccommodationClient, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	ListRoom(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddRoom(ctx context.Context, in *AddRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	ListUtilities(ctx context.Context, in *ListUtilitiesRequest, opts ...grpc.CallOption) (*ListUtilitiesResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ReserveRoom(ctx context.Context, in *ReserveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveReserveRoom(ctx context.Context, in *RemoveReserveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (ProjectAmor_ListNotificationsClient, error)
	ListRoomReviews(ctx context.Context, in *ListRoomReviewsRequest, opts ...grpc.CallOption) (*ListRoomReviewsResponse, error)
	CreateRoomReview(ctx context.Context, in *CreateRoomReviewRequest, opts ...grpc.CallOption) (*CreateRoomReviewResponse, error)
	SubscribeNotification(ctx context.Context, in *SubscribeNotificationRequest, opts ...grpc.CallOption) (ProjectAmor_SubscribeNotificationClient, error)
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeProfilePicture(ctx context.Context, in *ChangeProfilePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type projectAmorClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectAmorClient(cc grpc.ClientConnInterface) ProjectAmorClient {
	return &projectAmorClient{cc}
}

func (c *projectAmorClient) AddAccommodation(ctx context.Context, in *AddAccommodationRequest, opts ...grpc.CallOption) (*AddAccommodationResponse, error) {
	out := new(AddAccommodationResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_AddAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) DeleteAccommodation(ctx context.Context, in *DeleteAccommodationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_DeleteAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) UpdateAccommodation(ctx context.Context, in *UpdateAccommodationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_UpdateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) GetAccommodation(ctx context.Context, in *GetAccommodationRequest, opts ...grpc.CallOption) (*GetAccommodationResponse, error) {
	out := new(GetAccommodationResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_GetAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) GetAccommodationByUser(ctx context.Context, in *GetAccommodationByUserRequest, opts ...grpc.CallOption) (*GetAccommodationByUserResponse, error) {
	out := new(GetAccommodationByUserResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_GetAccommodationByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ListAccommodation(ctx context.Context, opts ...grpc.CallOption) (ProjectAmor_ListAccommodationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectAmor_ServiceDesc.Streams[0], ProjectAmor_ListAccommodation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectAmorListAccommodationClient{stream}
	return x, nil
}

type ProjectAmor_ListAccommodationClient interface {
	Send(*ListAccommodationRequest) error
	Recv() (*ListAccommodationResponse, error)
	grpc.ClientStream
}

type projectAmorListAccommodationClient struct {
	grpc.ClientStream
}

func (x *projectAmorListAccommodationClient) Send(m *ListAccommodationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectAmorListAccommodationClient) Recv() (*ListAccommodationResponse, error) {
	m := new(ListAccommodationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectAmorClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_GetRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ListRoom(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomResponse, error) {
	out := new(ListRoomResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_ListRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_UpdateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) AddRoom(ctx context.Context, in *AddRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_AddRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_DeleteRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ListUtilities(ctx context.Context, in *ListUtilitiesRequest, opts ...grpc.CallOption) (*ListUtilitiesResponse, error) {
	out := new(ListUtilitiesResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_ListUtilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ReserveRoom(ctx context.Context, in *ReserveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_ReserveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) RemoveReserveRoom(ctx context.Context, in *RemoveReserveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_RemoveReserveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (ProjectAmor_ListNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectAmor_ServiceDesc.Streams[1], ProjectAmor_ListNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectAmorListNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectAmor_ListNotificationsClient interface {
	Recv() (*ListNotificationsResponse, error)
	grpc.ClientStream
}

type projectAmorListNotificationsClient struct {
	grpc.ClientStream
}

func (x *projectAmorListNotificationsClient) Recv() (*ListNotificationsResponse, error) {
	m := new(ListNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectAmorClient) ListRoomReviews(ctx context.Context, in *ListRoomReviewsRequest, opts ...grpc.CallOption) (*ListRoomReviewsResponse, error) {
	out := new(ListRoomReviewsResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_ListRoomReviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) CreateRoomReview(ctx context.Context, in *CreateRoomReviewRequest, opts ...grpc.CallOption) (*CreateRoomReviewResponse, error) {
	out := new(CreateRoomReviewResponse)
	err := c.cc.Invoke(ctx, ProjectAmor_CreateRoomReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) SubscribeNotification(ctx context.Context, in *SubscribeNotificationRequest, opts ...grpc.CallOption) (ProjectAmor_SubscribeNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectAmor_ServiceDesc.Streams[2], ProjectAmor_SubscribeNotification_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectAmorSubscribeNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectAmor_SubscribeNotificationClient interface {
	Recv() (*SubscribeNotificationResponse, error)
	grpc.ClientStream
}

type projectAmorSubscribeNotificationClient struct {
	grpc.ClientStream
}

func (x *projectAmorSubscribeNotificationClient) Recv() (*SubscribeNotificationResponse, error) {
	m := new(SubscribeNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectAmorClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_DeleteNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_UpdateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAmorClient) ChangeProfilePicture(ctx context.Context, in *ChangeProfilePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectAmor_ChangeProfilePicture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectAmorServer is the server API for ProjectAmor service.
// All implementations must embed UnimplementedProjectAmorServer
// for forward compatibility
type ProjectAmorServer interface {
	AddAccommodation(context.Context, *AddAccommodationRequest) (*AddAccommodationResponse, error)
	DeleteAccommodation(context.Context, *DeleteAccommodationRequest) (*emptypb.Empty, error)
	UpdateAccommodation(context.Context, *UpdateAccommodationRequest) (*emptypb.Empty, error)
	GetAccommodation(context.Context, *GetAccommodationRequest) (*GetAccommodationResponse, error)
	GetAccommodationByUser(context.Context, *GetAccommodationByUserRequest) (*GetAccommodationByUserResponse, error)
	ListAccommodation(ProjectAmor_ListAccommodationServer) error
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	ListRoom(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*emptypb.Empty, error)
	AddRoom(context.Context, *AddRoomRequest) (*emptypb.Empty, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*emptypb.Empty, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	ListUtilities(context.Context, *ListUtilitiesRequest) (*ListUtilitiesResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ReserveRoom(context.Context, *ReserveRoomRequest) (*emptypb.Empty, error)
	RemoveReserveRoom(context.Context, *RemoveReserveRoomRequest) (*emptypb.Empty, error)
	ListNotifications(*ListNotificationsRequest, ProjectAmor_ListNotificationsServer) error
	ListRoomReviews(context.Context, *ListRoomReviewsRequest) (*ListRoomReviewsResponse, error)
	CreateRoomReview(context.Context, *CreateRoomReviewRequest) (*CreateRoomReviewResponse, error)
	SubscribeNotification(*SubscribeNotificationRequest, ProjectAmor_SubscribeNotificationServer) error
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*emptypb.Empty, error)
	UpdateNotification(context.Context, *UpdateNotificationRequest) (*emptypb.Empty, error)
	ChangeProfilePicture(context.Context, *ChangeProfilePictureRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProjectAmorServer()
}

// UnimplementedProjectAmorServer must be embedded to have forward compatible implementations.
type UnimplementedProjectAmorServer struct {
}

func (UnimplementedProjectAmorServer) AddAccommodation(context.Context, *AddAccommodationRequest) (*AddAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccommodation not implemented")
}
func (UnimplementedProjectAmorServer) DeleteAccommodation(context.Context, *DeleteAccommodationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodation not implemented")
}
func (UnimplementedProjectAmorServer) UpdateAccommodation(context.Context, *UpdateAccommodationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccommodation not implemented")
}
func (UnimplementedProjectAmorServer) GetAccommodation(context.Context, *GetAccommodationRequest) (*GetAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccommodation not implemented")
}
func (UnimplementedProjectAmorServer) GetAccommodationByUser(context.Context, *GetAccommodationByUserRequest) (*GetAccommodationByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccommodationByUser not implemented")
}
func (UnimplementedProjectAmorServer) ListAccommodation(ProjectAmor_ListAccommodationServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccommodation not implemented")
}
func (UnimplementedProjectAmorServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedProjectAmorServer) ListRoom(context.Context, *ListRoomRequest) (*ListRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoom not implemented")
}
func (UnimplementedProjectAmorServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedProjectAmorServer) AddRoom(context.Context, *AddRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoom not implemented")
}
func (UnimplementedProjectAmorServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedProjectAmorServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedProjectAmorServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedProjectAmorServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedProjectAmorServer) ListUtilities(context.Context, *ListUtilitiesRequest) (*ListUtilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUtilities not implemented")
}
func (UnimplementedProjectAmorServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedProjectAmorServer) ReserveRoom(context.Context, *ReserveRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveRoom not implemented")
}
func (UnimplementedProjectAmorServer) RemoveReserveRoom(context.Context, *RemoveReserveRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReserveRoom not implemented")
}
func (UnimplementedProjectAmorServer) ListNotifications(*ListNotificationsRequest, ProjectAmor_ListNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedProjectAmorServer) ListRoomReviews(context.Context, *ListRoomReviewsRequest) (*ListRoomReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoomReviews not implemented")
}
func (UnimplementedProjectAmorServer) CreateRoomReview(context.Context, *CreateRoomReviewRequest) (*CreateRoomReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomReview not implemented")
}
func (UnimplementedProjectAmorServer) SubscribeNotification(*SubscribeNotificationRequest, ProjectAmor_SubscribeNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNotification not implemented")
}
func (UnimplementedProjectAmorServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedProjectAmorServer) UpdateNotification(context.Context, *UpdateNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedProjectAmorServer) ChangeProfilePicture(context.Context, *ChangeProfilePictureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProfilePicture not implemented")
}
func (UnimplementedProjectAmorServer) mustEmbedUnimplementedProjectAmorServer() {}

// UnsafeProjectAmorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectAmorServer will
// result in compilation errors.
type UnsafeProjectAmorServer interface {
	mustEmbedUnimplementedProjectAmorServer()
}

func RegisterProjectAmorServer(s grpc.ServiceRegistrar, srv ProjectAmorServer) {
	s.RegisterService(&ProjectAmor_ServiceDesc, srv)
}

func _ProjectAmor_AddAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).AddAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_AddAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).AddAccommodation(ctx, req.(*AddAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_DeleteAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).DeleteAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_DeleteAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).DeleteAccommodation(ctx, req.(*DeleteAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_UpdateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).UpdateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_UpdateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).UpdateAccommodation(ctx, req.(*UpdateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_GetAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).GetAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_GetAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).GetAccommodation(ctx, req.(*GetAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_GetAccommodationByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccommodationByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).GetAccommodationByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_GetAccommodationByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).GetAccommodationByUser(ctx, req.(*GetAccommodationByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ListAccommodation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectAmorServer).ListAccommodation(&projectAmorListAccommodationServer{stream})
}

type ProjectAmor_ListAccommodationServer interface {
	Send(*ListAccommodationResponse) error
	Recv() (*ListAccommodationRequest, error)
	grpc.ServerStream
}

type projectAmorListAccommodationServer struct {
	grpc.ServerStream
}

func (x *projectAmorListAccommodationServer) Send(m *ListAccommodationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectAmorListAccommodationServer) Recv() (*ListAccommodationRequest, error) {
	m := new(ListAccommodationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProjectAmor_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).ListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_ListRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).ListRoom(ctx, req.(*ListRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_AddRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).AddRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_AddRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).AddRoom(ctx, req.(*AddRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ListUtilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUtilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).ListUtilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_ListUtilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).ListUtilities(ctx, req.(*ListUtilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ReserveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).ReserveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_ReserveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).ReserveRoom(ctx, req.(*ReserveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_RemoveReserveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReserveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).RemoveReserveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_RemoveReserveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).RemoveReserveRoom(ctx, req.(*RemoveReserveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ListNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectAmorServer).ListNotifications(m, &projectAmorListNotificationsServer{stream})
}

type ProjectAmor_ListNotificationsServer interface {
	Send(*ListNotificationsResponse) error
	grpc.ServerStream
}

type projectAmorListNotificationsServer struct {
	grpc.ServerStream
}

func (x *projectAmorListNotificationsServer) Send(m *ListNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectAmor_ListRoomReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).ListRoomReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_ListRoomReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).ListRoomReviews(ctx, req.(*ListRoomReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_CreateRoomReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).CreateRoomReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_CreateRoomReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).CreateRoomReview(ctx, req.(*CreateRoomReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_SubscribeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectAmorServer).SubscribeNotification(m, &projectAmorSubscribeNotificationServer{stream})
}

type ProjectAmor_SubscribeNotificationServer interface {
	Send(*SubscribeNotificationResponse) error
	grpc.ServerStream
}

type projectAmorSubscribeNotificationServer struct {
	grpc.ServerStream
}

func (x *projectAmorSubscribeNotificationServer) Send(m *SubscribeNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectAmor_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_UpdateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).UpdateNotification(ctx, req.(*UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAmor_ChangeProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProfilePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAmorServer).ChangeProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAmor_ChangeProfilePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAmorServer).ChangeProfilePicture(ctx, req.(*ChangeProfilePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectAmor_ServiceDesc is the grpc.ServiceDesc for ProjectAmor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectAmor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectamor_api.amor.v1.ProjectAmor",
	HandlerType: (*ProjectAmorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccommodation",
			Handler:    _ProjectAmor_AddAccommodation_Handler,
		},
		{
			MethodName: "DeleteAccommodation",
			Handler:    _ProjectAmor_DeleteAccommodation_Handler,
		},
		{
			MethodName: "UpdateAccommodation",
			Handler:    _ProjectAmor_UpdateAccommodation_Handler,
		},
		{
			MethodName: "GetAccommodation",
			Handler:    _ProjectAmor_GetAccommodation_Handler,
		},
		{
			MethodName: "GetAccommodationByUser",
			Handler:    _ProjectAmor_GetAccommodationByUser_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _ProjectAmor_GetRoom_Handler,
		},
		{
			MethodName: "ListRoom",
			Handler:    _ProjectAmor_ListRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _ProjectAmor_UpdateRoom_Handler,
		},
		{
			MethodName: "AddRoom",
			Handler:    _ProjectAmor_AddRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _ProjectAmor_DeleteRoom_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _ProjectAmor_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _ProjectAmor_LoginUser_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _ProjectAmor_ResetPassword_Handler,
		},
		{
			MethodName: "ListUtilities",
			Handler:    _ProjectAmor_ListUtilities_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ProjectAmor_GetUser_Handler,
		},
		{
			MethodName: "ReserveRoom",
			Handler:    _ProjectAmor_ReserveRoom_Handler,
		},
		{
			MethodName: "RemoveReserveRoom",
			Handler:    _ProjectAmor_RemoveReserveRoom_Handler,
		},
		{
			MethodName: "ListRoomReviews",
			Handler:    _ProjectAmor_ListRoomReviews_Handler,
		},
		{
			MethodName: "CreateRoomReview",
			Handler:    _ProjectAmor_CreateRoomReview_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _ProjectAmor_DeleteNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _ProjectAmor_UpdateNotification_Handler,
		},
		{
			MethodName: "ChangeProfilePicture",
			Handler:    _ProjectAmor_ChangeProfilePicture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccommodation",
			Handler:       _ProjectAmor_ListAccommodation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListNotifications",
			Handler:       _ProjectAmor_ListNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNotification",
			Handler:       _ProjectAmor_SubscribeNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "amor/amor.proto",
}
