// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: amornotification/amornotification.proto

package amornotification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AmorNotification_GetRealTimeNotifications_FullMethodName = "/projectamor_api.amornotification.v1.AmorNotification/GetRealTimeNotifications"
)

// AmorNotificationClient is the client API for AmorNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmorNotificationClient interface {
	GetRealTimeNotifications(ctx context.Context, in *GetRealTimeNotificationsRequest, opts ...grpc.CallOption) (AmorNotification_GetRealTimeNotificationsClient, error)
}

type amorNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewAmorNotificationClient(cc grpc.ClientConnInterface) AmorNotificationClient {
	return &amorNotificationClient{cc}
}

func (c *amorNotificationClient) GetRealTimeNotifications(ctx context.Context, in *GetRealTimeNotificationsRequest, opts ...grpc.CallOption) (AmorNotification_GetRealTimeNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AmorNotification_ServiceDesc.Streams[0], AmorNotification_GetRealTimeNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &amorNotificationGetRealTimeNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AmorNotification_GetRealTimeNotificationsClient interface {
	Recv() (*GetRealTimeNotificationsResponse, error)
	grpc.ClientStream
}

type amorNotificationGetRealTimeNotificationsClient struct {
	grpc.ClientStream
}

func (x *amorNotificationGetRealTimeNotificationsClient) Recv() (*GetRealTimeNotificationsResponse, error) {
	m := new(GetRealTimeNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AmorNotificationServer is the server API for AmorNotification service.
// All implementations must embed UnimplementedAmorNotificationServer
// for forward compatibility
type AmorNotificationServer interface {
	GetRealTimeNotifications(*GetRealTimeNotificationsRequest, AmorNotification_GetRealTimeNotificationsServer) error
	mustEmbedUnimplementedAmorNotificationServer()
}

// UnimplementedAmorNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedAmorNotificationServer struct {
}

func (UnimplementedAmorNotificationServer) GetRealTimeNotifications(*GetRealTimeNotificationsRequest, AmorNotification_GetRealTimeNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRealTimeNotifications not implemented")
}
func (UnimplementedAmorNotificationServer) mustEmbedUnimplementedAmorNotificationServer() {}

// UnsafeAmorNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmorNotificationServer will
// result in compilation errors.
type UnsafeAmorNotificationServer interface {
	mustEmbedUnimplementedAmorNotificationServer()
}

func RegisterAmorNotificationServer(s grpc.ServiceRegistrar, srv AmorNotificationServer) {
	s.RegisterService(&AmorNotification_ServiceDesc, srv)
}

func _AmorNotification_GetRealTimeNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRealTimeNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AmorNotificationServer).GetRealTimeNotifications(m, &amorNotificationGetRealTimeNotificationsServer{stream})
}

type AmorNotification_GetRealTimeNotificationsServer interface {
	Send(*GetRealTimeNotificationsResponse) error
	grpc.ServerStream
}

type amorNotificationGetRealTimeNotificationsServer struct {
	grpc.ServerStream
}

func (x *amorNotificationGetRealTimeNotificationsServer) Send(m *GetRealTimeNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AmorNotification_ServiceDesc is the grpc.ServiceDesc for AmorNotification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AmorNotification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectamor_api.amornotification.v1.AmorNotification",
	HandlerType: (*AmorNotificationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRealTimeNotifications",
			Handler:       _AmorNotification_GetRealTimeNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "amornotification/amornotification.proto",
}
